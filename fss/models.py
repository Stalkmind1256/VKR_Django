from django.db import models
from django.contrib.auth.models import AbstractUser
from django.conf import settings
from django.db.models import Avg  # üí° –î–æ–±–∞–≤–ª–µ–Ω –¥–ª—è avg_rating property
from django.contrib.auth import get_user_model


class Divisions(models.Model):
    DIVISIONS_CHOICES = [
        ('technopark', '–¢–µ—Ö–Ω–æ–ø–∞—Ä–∫'),
        ('deanery', '–î–µ–∫–∞–Ω–∞—Ç'),
        ('rectorate', '–†–µ–∫—Ç–æ—Ä–∞—Ç'),
        ('uvc', '–£—á–µ–±–Ω–æ-–≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä (–£–í–¶)'),
        ('administration', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è'),
    ]

    name = models.CharField(
        max_length=100,
        choices=DIVISIONS_CHOICES,
        unique=True,
        verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è"
    )

    class Meta:
        verbose_name = "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"
        verbose_name_plural = "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è"
        ordering = ["name"]

    def __str__(self):
        return self.get_name_display()


class CustomUser(AbstractUser):
    patronymic = models.CharField("–û—Ç—á–µ—Å—Ç–≤–æ", max_length=150, blank=True, null=True)
    division = models.ForeignKey(
        Divisions,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"
    )


class Status(models.Model):
    STATUS_CHOICES = [
        ('draft', '–ß–µ—Ä–Ω–æ–≤–∏–∫'),
        ('submitted', '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'),
        ('under_review', '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏'),
        ('approved', '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'),
        ('preparing', '–ì–æ—Ç–æ–≤–∏—Ç—Å—è –∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏'),
        ('in_progress', '–†–µ–∞–ª–∏–∑—É–µ—Ç—Å—è'),
        ('completed', '–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ'),
        ('rejected', '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'),
        ('archived', '–ê—Ä—Ö–∏–≤'),
    ]
    name = models.CharField(
        max_length=200,
        choices=STATUS_CHOICES,
        verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞',
    )

    class Meta:
        verbose_name = '–°—Ç–∞—Ç—É—Å'
        verbose_name_plural = '–°—Ç–∞—Ç—É—Å—ã'
        ordering = ['name']

    def __str__(self):
        return dict(self.STATUS_CHOICES).get(self.name, self.name)


class Category(models.Model):
    CATEGORY_CHOICES = [
        ('technology', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'),
        ('education', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'),
    ]
    name = models.CharField(
        max_length=100,
        choices=CATEGORY_CHOICES,
        verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
    )

    class Meta:
        verbose_name = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
        verbose_name_plural = '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏'
        ordering = ['name']

    def __str__(self):
        return self.get_name_display()


class Suggestion(models.Model):
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.PROTECT,
        related_name='suggestions',
        verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    )
    title = models.CharField(
        max_length=255,
        verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ',
    )
    description = models.TextField(
        max_length=10000,
        verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ',
    )
    category = models.ForeignKey(
        'Category',
        on_delete=models.PROTECT,
        null=True,
        related_name='suggestions',
        verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
    )
    status = models.ForeignKey(
        'Status',
        on_delete=models.PROTECT,
        null=True,
        related_name='suggestions',
        verbose_name='–°—Ç–∞—Ç—É—Å',
    )
    date_create = models.DateTimeField(
        auto_now_add=True,
        verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
    )

    class Meta:
        verbose_name = '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'
        verbose_name_plural = '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
        ordering = ['-date_create']

    def __str__(self):
        return self.title

    @property
    def avg_rating(self):
        avg = self.ratings.aggregate(avg=Avg('rating'))['avg']
        return round(avg or 0, 1)

    @property
    def votes_count(self):
        return self.ratings.count()

    def can_change_status(self, new_status_name):
        transitions = {
            'draft': ['submitted'],  # —á–µ—Ä–Ω–æ–≤–∏–∫ ‚Üí –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            'submitted': ['under_review', 'archived', 'draft'],
            # –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚Üí –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏, –∞—Ä—Ö–∏–≤ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ —á–µ—Ä–Ω–æ–≤–∏–∫
            'under_review': ['approved', 'rejected'],  # –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ
            'approved': ['preparing'],  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ ‚Üí –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
            'preparing': ['in_progress'],  # –≥–æ—Ç–æ–≤–∏—Ç—Å—è ‚Üí —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è
            'in_progress': ['completed'],  # —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è ‚Üí —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
            'completed': [],  # –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚Äî –∫–æ–Ω–µ—Ü
            'rejected': ['archived', 'draft'],  # –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚Üí –∞—Ä—Ö–∏–≤ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ —á–µ—Ä–Ω–æ–≤–∏–∫
            'archived': [],  # –∞—Ä—Ö–∏–≤ ‚Äî –∫–æ–Ω–µ—Ü
        }

        current = self.status.name
        allowed = transitions.get(current, [])
        return new_status_name in allowed




class Comment(models.Model):
    suggestion = models.ForeignKey(Suggestion, on_delete=models.CASCADE, related_name='comments')
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    text = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç {self.user.username} –∫ {self.suggestion.title}"


class Notification(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name="notifications")
    message = models.TextField()
    is_read = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.message


class SuggestionRating(models.Model):
    suggestion = models.ForeignKey(Suggestion, on_delete=models.CASCADE, related_name="ratings")
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    rating = models.IntegerField()

    class Meta:
        unique_together = ('suggestion', 'user')
